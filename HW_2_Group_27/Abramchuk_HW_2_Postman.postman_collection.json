{
	"info": {
		"_postman_id": "1e7731ae-2736-4410-83c0-3c81421ba946",
		"name": "Abramchuk_HW_2_Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "First",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"   pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Name=David\", function () {\r",
							"   pm.expect(jsonData.name).to.eql(\"David\");\r",
							"});\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Age=22\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(\"22\");\r",
							"});\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Salary=500\", function () {\r",
							"     pm.expect(jsonData.salary).to.eql(500);\r",
							"});\r",
							"//7. Спарсить request.\r",
							"let reqData = request.data;\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Response name = Request name\", function () {\r",
							"  pm.expect(jsonData.name).to.eql(reqData.name);\r",
							"});\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Response age = Request age\", function () {\r",
							"     pm.expect(jsonData.age).to.eql(reqData.age);\r",
							"});\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Response salary = Request salary\", function () {\r",
							"    let salary_1 = +reqData.salary;\r",
							"   pm.expect(jsonData.salary).to.eql(salary_1);\r",
							"});\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family);\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"pm.test(\"u_salary_1_5_year = salary*4\" ,function () {\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(reqData.salary*4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "David",
							"type": "text"
						},
						{
							"key": "age",
							"value": "22",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"//4. Спарсить request.\r",
							"let reqData = pm.request.url.query.toObject()\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Response name = Request name\", function () {\r",
							"  pm.expect(jsonData.name).to.eql(reqData.name);\r",
							"});\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Response age = Request age\", function () {\r",
							"     pm.expect(jsonData.age).to.eql(reqData.age);\r",
							"});\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Response salary = Request salary\", function () {\r",
							"    let salary_1 = +reqData.salary;\r",
							"   pm.expect(jsonData.salary).to.eql(salary_1);\r",
							"});\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family);\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dog has a name\", function () {\r",
							"pm.expect(jsonData.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog has a age\", function () {\r",
							"pm.expect(jsonData.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Dog name = Luky\", function () {\r",
							"pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Dog age = 4\", function () {\r",
							"pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=David&age=22&salary=2",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "David"
						},
						{
							"key": "age",
							"value": "22"
						},
						{
							"key": "salary",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"//4. Спарсить request.\r",
							"let reqData = pm.request.url.query.toObject();\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Response name = Request name\", function () {\r",
							"  pm.expect(jsonData.name).to.eql(reqData.name);\r",
							"});\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Response age = Request age\", function () {\r",
							"    let age_1 = jsonData.age;\r",
							"  pm.expect(jsonData.age).to.eql(age_1);\r",
							"});\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"console.log(\"Request salary\", reqData.salary);\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"console.log(\"Response salary\", jsonData.salary);\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(\"Response salary, 0-й элемент\", jsonData.salary[0]);\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"Response salary, 1-й элемент\", jsonData.salary[1]);\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"Response salary, 2-й элемент\", jsonData.salary[2]);\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"let salary_1 = Number(reqData.salary);\r",
							"pm.test(\"Response salary [0] = Request salary\", function () {\r",
							"    pm.expect(jsonData.salary[0]).to.eql(salary_1);\r",
							"});\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Response salary [1] = Request salary*2\", function () {\r",
							"    pm.expect(jsonData.salary[1]).to.eql+(salary_1*2);\r",
							"});\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Response salary [2] = Request salary*3\", function () {\r",
							"    pm.expect(jsonData.salary[2]).to.eql+(salary_1*3);\r",
							"});\r",
							"//15. Создать в окружении переменную name\r",
							"//OK\r",
							"//16. Создать в окружении переменную age\r",
							"//OK\r",
							"//17. Создать в окружении переменную salary\r",
							"//OK\r",
							"//18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", reqData.name);\r",
							"//19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", reqData.age);\r",
							"//20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", reqData.salary);\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (var i of jsonData.salary) {\r",
							"console.log(i)\r",
							"};\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=David&age=22&salary=50",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "David"
						},
						{
							"key": "age",
							"value": "22"
						},
						{
							"key": "salary",
							"value": "50"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Вставить параметр salary из окружения в request\r",
							"//OK\r",
							"//2. Вставить параметр age из окружения в age\r",
							"//OK\r",
							"//3. Вставить параметр name из окружения в name\r",
							"//OK\r",
							"//4. Отправить запрос.\r",
							"//5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//6. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"//7. Спарсить request.\r",
							"let reqData = request.data;\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"json response имеет параметр start_qa_salary\", function (){\r",
							"pm.expect(jsonData).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"json response имеет параметр qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"json response имеет параметр qa_salary_after_12_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"json response имеет параметр qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"json response имеет параметр  qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"json response имеет параметр person\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"person\");\r",
							"});\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary = Request salary\", function () {\r",
							"     pm.expect(jsonData.start_qa_salary).to.eql(+reqData.salary);\r",
							"});\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months = salary*2\", function () {\r",
							"     pm.expect(jsonData.qa_salary_after_6_months).to.eql(reqData.salary*2);\r",
							"});\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months = salary*2.7\", function () {\r",
							"     pm.expect(jsonData.qa_salary_after_12_months).to.eql(reqData.salary*2.7);\r",
							"});\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year = salary*3.3\", function () {\r",
							"     pm.expect(jsonData['qa_salary_after_1.5_year']).to.eql(reqData.salary*3.3);\r",
							"});\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years = salary*3.8\", function () {\r",
							"     pm.expect(jsonData['qa_salary_after_3.5_years']).to.eql(reqData.salary*3.8);\r",
							"});\r",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"person, 1-й элемент из u_name =  salary из request\", function () {\r",
							"     pm.expect(jsonData.person.u_name[1]).to.eql(+reqData.salary);\r",
							"});\r",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"u_age = age из request\", function () {\r",
							"     pm.expect(jsonData.person.u_age).to.eql(+reqData.age);\r",
							"});\r",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"u_salary_5_years =  salary*4.2\", function () {\r",
							"     pm.expect(jsonData.person.u_salary_5_years).to.eql(+reqData.salary*4.2);\r",
							"});\r",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (let i in jsonData.person){\r",
							" console.log(i+ \"=\" ,jsonData.person[i])\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "162.55.220.72:5005",
			"type": "string"
		}
	]
}